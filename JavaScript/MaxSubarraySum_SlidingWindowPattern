// Big O(n) - Time Complexity

/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */
var maxSubarraySum = function(nums, n) { 
    if(nums.length === 0) {
      return null;
    }
    if(n > nums.length) {
      return null;
    }
    let maxSum = 0;
    let tempSum = 0; 
    for(let i=0; i < n; i++) {
      maxSum = maxSum + nums[i]; 
    }
    tempSum = maxSum;
    for(let i=n; i < nums.length; i++) {
      tempSum = tempSum - nums[i - n] + nums[i];
      maxSum = Math.max(maxSum, tempSum);
    }
    return maxSum;
    
};

console.log(maxSubarraySum([1,2,5,2,8,1,5], 2));
console.log(maxSubarraySum([1,2,5,2,8,1,5], 4));
console.log(maxSubarraySum([4,2,1,6], 1));
console.log(maxSubarraySum([4,2,1,6,2], 4));
console.log(maxSubarraySum([],4));
